// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package mosquito

import (
	"sync"
)

var (
	locklisterMockList	sync.RWMutex
)

// listerMock is a mock implementation of lister.
//
//     func TestSomethingThatUseslister(t *testing.T) {
//
//         // make and configure a mocked lister
//         mockedlister := &listerMock{ 
//             ListFunc: func() ([]Todo, error) {
// 	               panic("TODO: mock out the List method")
//             },
//         }
//
//         // TODO: use mockedlister in code that requires lister
//         //       and then make assertions.
// 
//     }
type listerMock struct {
	// ListFunc mocks the List method.
	ListFunc func() ([]Todo, error)

	// calls tracks calls to the methods.
	calls struct {
		// List holds details about calls to the List method.
		List []struct {
		}
	}
}

// List calls ListFunc.
func (mock *listerMock) List() ([]Todo, error) {
	if mock.ListFunc == nil {
		panic("moq: listerMock.ListFunc is nil but lister.List was just called")
	}
	callInfo := struct {
	}{
	}
	locklisterMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	locklisterMockList.Unlock()
	return mock.ListFunc()
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedlister.ListCalls())
func (mock *listerMock) ListCalls() []struct {
	} {
	var calls []struct {
	}
	locklisterMockList.RLock()
	calls = mock.calls.List
	locklisterMockList.RUnlock()
	return calls
}
