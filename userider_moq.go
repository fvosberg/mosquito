// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package mosquito

import (
	"sync"
)

var (
	lockuserIDerMockUserID	sync.RWMutex
)

// userIDerMock is a mock implementation of userIDer.
//
//     func TestSomethingThatUsesuserIDer(t *testing.T) {
//
//         // make and configure a mocked userIDer
//         mockeduserIDer := &userIDerMock{ 
//             UserIDFunc: func(in1 string) (string, error) {
// 	               panic("TODO: mock out the UserID method")
//             },
//         }
//
//         // TODO: use mockeduserIDer in code that requires userIDer
//         //       and then make assertions.
// 
//     }
type userIDerMock struct {
	// UserIDFunc mocks the UserID method.
	UserIDFunc func(in1 string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// UserID holds details about calls to the UserID method.
		UserID []struct {
			// In1 is the in1 argument value.
			In1 string
		}
	}
}

// UserID calls UserIDFunc.
func (mock *userIDerMock) UserID(in1 string) (string, error) {
	if mock.UserIDFunc == nil {
		panic("moq: userIDerMock.UserIDFunc is nil but userIDer.UserID was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockuserIDerMockUserID.Lock()
	mock.calls.UserID = append(mock.calls.UserID, callInfo)
	lockuserIDerMockUserID.Unlock()
	return mock.UserIDFunc(in1)
}

// UserIDCalls gets all the calls that were made to UserID.
// Check the length with:
//     len(mockeduserIDer.UserIDCalls())
func (mock *userIDerMock) UserIDCalls() []struct {
		In1 string
	} {
	var calls []struct {
		In1 string
	}
	lockuserIDerMockUserID.RLock()
	calls = mock.calls.UserID
	lockuserIDerMockUserID.RUnlock()
	return calls
}
